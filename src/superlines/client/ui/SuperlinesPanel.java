/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package superlines.client.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.JPanel;
import javax.swing.SpringLayout;

import superlines.client.SuperlinesController;
import superlines.client.ColorHelper;
import superlines.core.SuperlinesBall;
import superlines.core.SuperlinesContext;

/**
 *
 * @author Sashonk
 */
public class SuperlinesPanel extends javax.swing.JPanel {


	private static final int DEFAULT_SIZE = 8;
	private  SuperlinesController m_ctr;
	
	
	
	private BallSpot[][] m_spots;
	
	public BallSpot[][] getSpots(){
		return m_spots;
	}
	
    /**
     * Creates new form SuperlinesPanel
     */
    public SuperlinesPanel() {
        initComponents();
        
        this.setLayout(new SpringLayout());

    	int size = DEFAULT_SIZE;
    	
    	m_spots = new BallSpot[size][];       
        for(int i = 0; i< size ; i++){
        	m_spots[i] = new BallSpot[size];
        	for(int j = 0; j<size; j++){
        		m_spots[i][j] = new BallSpot(i,j);
        		m_spots[i][j].addMouseListener(new MouseAdapter(){
        			public void mousePressed(MouseEvent e){
        				BallSpot spot = (BallSpot) e.getComponent();
        				m_ctr.spotClicked(spot.getXCoor(), spot.getYCoor());
        			}
        		});
        		m_spots[i][j].setBackground(Color.pink);
        		this.add(m_spots[i][j]);
        	}
        }   	
        
        SpringUtilities.makeGrid(this, size, size, 5, 5, 5, 5);       

    }
    
    public void setController(final SuperlinesController ctr){
        m_ctr = ctr;
    }
    
    public void init(final SuperlinesContext ctx){
        

    	int size = ctx.getTable().getSize();
    	
    	if(size!=DEFAULT_SIZE){
        	removeAll();

        	m_spots = new BallSpot[size][];       
            for(int i = 0; i< size ; i++){
            	m_spots[i] = new BallSpot[size];
            	for(int j = 0; j<size; j++){
            		m_spots[i][j] = new BallSpot(i, j);
            		            		
            		m_spots[i][j].addMouseListener(new MouseAdapter(){
            			public void mousePressed(MouseEvent e){
            				BallSpot spot = (BallSpot) e.getComponent();
            				m_ctr.spotClicked(spot.getXCoor(), spot.getYCoor());
            			}
            		});
            		m_spots[i][j].setBackground(Color.pink);
            		this.add(m_spots[i][j]);
            	}
            }        	
    	}
    	
    	 SpringUtilities.makeGrid(this, size, size, 5, 5, 5, 5);     
    	
    	for(int i = 0; i<size; i++){
    		for(int j = 0 ; j<size; j++){
    			SuperlinesBall ball = ctx.getTable().getBalls()[i][j];
    			m_spots[i][j].setBackground(ColorHelper.number2Color(ball.getColor()));
    			m_spots[i][j].setClicked(false);
    		}
    	}
    	
    	if(ctx.getTable().getClickedBall()!=null){
    		SuperlinesBall ball = ctx.getTable().getClickedBall();
    		m_spots[ball.getX()][ball.getY()].setClicked(true);
    	}
    	
    	this.doLayout();
    	this.repaint();
    	

    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(153, 153, 153));
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
